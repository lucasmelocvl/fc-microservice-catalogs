<?php

namespace Tests\Unit\Models;

use App\Models\Category;
use App\Models\Traits\Uuid;
use Illuminate\Database\Eloquent\SoftDeletes;
use Tests\TestCase;

class CategoryTest extends TestCase
{
    private $category;

    // Executado apenas uma vez, ao chamar a classe, antes de ser executado o teste
    public static function setUpBeforeClass(): void
    {
        // Poderia criar um banco de dados, tabelas e coisas que precisam ser executadas antes de iniciar
        parent::setUpBeforeClass(); // TODO: Change the autogenerated stub
    }

    // Executado toda a vez que um teste é iniciado
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->category = new Category();
    }

    // Executado toda a vez que um teste é finalizado
    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub

    }

    // Executado apenas uma vez, após os testes da classe serem finalizado
    public static function tearDownAfterClass(): void
    {
        parent::tearDownAfterClass(); // TODO: Change the autogenerated stub
    }

    public function testIfUseTraits()
    {
        $traits = [
            SoftDeletes::class,
            Uuid::class
        ];
        $categoryTrait = array_keys(class_uses((Category::class)));
        $this->assertEquals($traits, $categoryTrait);
        //print_r(class_uses((Category::class)));
    }

    public function testFillableAttribute()
    {
        $fillable = [
            'name',
            'description',
            'is_active'
        ];
        $this->assertEquals($fillable, $this->category->getFillable());
    }

    public function testDatesAttribute()
    {
        $categoryDates = $this->category->getDates();
        $dates = ['created_at', 'updated_at', 'deleted_at'];

        # Versão antiga antes do assertEqualsCanonicalizing
        //foreach($dates as $date) {
        //    $this->assertContains($date, $categoryDates);
        //}

        $this->assertEqualsCanonicalizing($dates, $categoryDates);

        $this->assertCount(count($dates), $categoryDates);
    }

    public function testKeyType()
    {
        $keyType = 'string';
        $this->assertEquals($keyType, $this->category->getKeyType());
    }

    public function testCasts()
    {
        $casts = [
            'id' => 'string',
            'is_active' => 'bool'
        ];
        $this->assertEquals($casts, $this->category->getCasts());
    }

    public function testIncrementing()
    {
        $this->assertFalse($this->category->incrementing);
    }
}
